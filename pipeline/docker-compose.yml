version: '3.8'

services:
  # RabbitMQ for durable message queuing and task orchestration
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: mhm-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: sales_pipeline
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-sales_secure_2025}
      RABBITMQ_DEFAULT_VHOST: mhm_sales
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sales-network
    restart: unless-stopped

  # Redis for fast caching and state management
  redis:
    image: redis:7-alpine
    container_name: mhm-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_2025}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - sales-network
    restart: unless-stopped

  # WebSocket Server for real-time agent communication
  websocket_server:
    build:
      context: .
      dockerfile: infrastructure/websocket/Dockerfile
    container_name: mhm-websocket
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=amqp://sales_pipeline:${RABBITMQ_PASSWORD:-sales_secure_2025}@rabbitmq:5672/mhm_sales
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2025}@redis:6379
      - WS_PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - sales-network
    restart: unless-stopped

  # Main Sales Pipeline Agent Orchestrator
  agent_orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mhm-orchestrator
    environment:
      - NODE_ENV=production
      - RABBITMQ_URL=amqp://sales_pipeline:${RABBITMQ_PASSWORD:-sales_secure_2025}@rabbitmq:5672/mhm_sales
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_2025}@redis:6379
      - WEBSOCKET_URL=ws://websocket_server:8080
      - OBSIDIAN_VAULT_PATH=/app/obsidian
      # API Keys
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - YELLOW_PAGES_API_KEY=${YELLOW_PAGES_API_KEY}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      # Optional integrations
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - FRESHBOOKS_API_KEY=${FRESHBOOKS_API_KEY}
      - LINEAR_API_KEY=${LINEAR_API_KEY}
    volumes:
      - ./data:/app/data
      - ./config:/app/config
      - ./logs:/app/logs
      - ${OBSIDIAN_VAULT_PATH:-./obsidian_vault}:/app/obsidian
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      websocket_server:
        condition: service_started
    networks:
      - sales-network
    restart: unless-stopped
    ports:
      - "3000:3000"

  # Optional: Database for advanced analytics
  postgres:
    image: postgres:15-alpine
    container_name: sales-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sales_automation}
      - POSTGRES_USER=${POSTGRES_USER:-sales_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-defaultpassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - sales-network

networks:
  sales-network:
    driver: bridge
    name: sales-automation-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  rabbitmq_data:
    name: mhm-rabbitmq-data
  redis_data:
    name: mhm-redis-data
  postgres_data:
    name: sales-postgres-data