# Sales Pipeline Global Command Installer (Windows PowerShell)
# Installs global bin commands for sales-pipeline component

param(
    [switch]$Force = $false
)

$ErrorActionPreference = "Stop"

$ComponentName = "sales-pipeline"
$ComponentPath = Split-Path -Parent (Split-Path -Parent $PSScriptRoot)
$InstallDir = "$env:USERPROFILE\.local\bin"

Write-Host "🚀 Installing global commands for $ComponentName..." -ForegroundColor Green
Write-Host "Component path: $ComponentPath" -ForegroundColor Gray

# Create install directory if it doesn't exist
if (-not (Test-Path $InstallDir)) {
    New-Item -ItemType Directory -Path $InstallDir -Force | Out-Null
    Write-Host "📁 Created directory: $InstallDir" -ForegroundColor Blue
}

# Add to PATH if not already there
$CurrentPath = [Environment]::GetEnvironmentVariable("PATH", "User")
if ($CurrentPath -notlike "*$InstallDir*") {
    Write-Host "📝 Adding $InstallDir to user PATH..." -ForegroundColor Blue
    [Environment]::SetEnvironmentVariable("PATH", "$CurrentPath;$InstallDir", "User")
    Write-Host "✅ PATH updated. Restart terminal to use new commands." -ForegroundColor Yellow
}

# Create global command scripts
function Create-GlobalScript {
    param(
        [string]$CmdName,
        [string]$NpmScript,
        [string]$Description
    )
    
    $BatchContent = @"
@echo off
REM $Description
REM Auto-generated by sales-pipeline component installer

set SALES_PIPELINE_PATH=$ComponentPath

if not exist "%SALES_PIPELINE_PATH%" (
    echo ❌ Sales pipeline component not found at: %SALES_PIPELINE_PATH%
    echo Please reinstall the sales-pipeline component
    exit /b 1
)

cd /d "%SALES_PIPELINE_PATH%"
npm run $NpmScript %*
"@
    
    $PowerShellContent = @"
# $Description
# Auto-generated by sales-pipeline component installer

`$SalesPipelinePath = "$ComponentPath"

if (-not (Test-Path `$SalesPipelinePath)) {
    Write-Host "❌ Sales pipeline component not found at: `$SalesPipelinePath" -ForegroundColor Red
    Write-Host "Please reinstall the sales-pipeline component" -ForegroundColor Red
    exit 1
}

Set-Location `$SalesPipelinePath
npm run $NpmScript @args
"@
    
    # Create batch file for cmd.exe
    $BatchFile = "$InstallDir\$CmdName.bat"
    $BatchContent | Out-File -FilePath $BatchFile -Encoding ASCII
    
    # Create PowerShell script
    $PowerShellFile = "$InstallDir\$CmdName.ps1"
    $PowerShellContent | Out-File -FilePath $PowerShellFile -Encoding UTF8
    
    Write-Host "✅ Installed: $CmdName -> npm run $NpmScript" -ForegroundColor Green
}

# Install core sales commands
Create-GlobalScript "sales-prospect" "add-prospect-enhanced" "Enhanced prospect research and qualification"
Create-GlobalScript "sales-pitch" "generate-pitches" "Generate AI-powered sales pitches"
Create-GlobalScript "sales-analytics" "update-analytics" "Update sales analytics dashboard"
Create-GlobalScript "sales-kanban" "sync-kanban" "Sync Obsidian Kanban boards"
Create-GlobalScript "sales-status" "prospect:status" "Check prospect processing status"
Create-GlobalScript "sales-dev" "dev" "Start sales pipeline in development mode"

# Install agent commands
Create-GlobalScript "mastra-prospect" "mastra:prospect" "Run Mastra prospecting agent"
Create-GlobalScript "mastra-pitch" "mastra:pitch" "Run Mastra pitch creator agent"
Create-GlobalScript "mastra-status" "mastra:status" "Check Mastra agent status"

Write-Host ""
Write-Host "🎉 Global sales commands installed successfully!" -ForegroundColor Green
Write-Host ""
Write-Host "Available commands:" -ForegroundColor Cyan
Write-Host "  sales-prospect <business-name>  - Research and add prospect"
Write-Host "  sales-pitch                     - Generate sales pitches"
Write-Host "  sales-analytics                 - Update analytics dashboard"
Write-Host "  sales-kanban                    - Sync Kanban boards"
Write-Host "  sales-status                    - Check processing status"
Write-Host "  sales-dev                       - Development mode"
Write-Host "  mastra-prospect                 - Mastra prospecting agent"
Write-Host "  mastra-pitch                    - Mastra pitch creator"
Write-Host "  mastra-status                   - Mastra status check"
Write-Host ""
Write-Host "Example usage:" -ForegroundColor Yellow
Write-Host "  sales-prospect `"Mile High Bistro`""
Write-Host "  sales-pitch --all --evaluate"
Write-Host "  sales-analytics"
Write-Host ""