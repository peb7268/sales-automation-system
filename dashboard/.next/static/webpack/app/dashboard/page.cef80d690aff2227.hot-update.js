"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./stores/usePipelineStoreWithSupabase.ts":
/*!************************************************!*\
  !*** ./stores/usePipelineStoreWithSupabase.ts ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePipelineStoreWithSupabase: function() { return /* binding */ usePipelineStoreWithSupabase; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io-client */ \"(app-pages-browser)/./node_modules/socket.io-client/build/esm/index.js\");\n\n\n\n// Convert database prospect to IProspect\nconst convertToIProspect = (dbProspect)=>{\n    var _dbProspect_location_split_, _dbProspect_location_split_1;\n    return {\n        id: dbProspect.id,\n        business: {\n            name: dbProspect.business_name,\n            industry: dbProspect.industry,\n            location: {\n                address: \"\",\n                city: ((_dbProspect_location_split_ = dbProspect.location.split(\",\")[0]) === null || _dbProspect_location_split_ === void 0 ? void 0 : _dbProspect_location_split_.trim()) || \"\",\n                state: ((_dbProspect_location_split_1 = dbProspect.location.split(\",\")[1]) === null || _dbProspect_location_split_1 === void 0 ? void 0 : _dbProspect_location_split_1.trim()) || \"\",\n                zipCode: \"\",\n                country: \"USA\",\n                coordinates: {\n                    lat: 0,\n                    lng: 0\n                }\n            },\n            website: dbProspect.website || \"\",\n            description: \"\",\n            size: {\n                category: \"small\",\n                employeeCount: 10,\n                estimatedRevenue: 500000\n            },\n            digitalPresence: {\n                hasWebsite: !!dbProspect.website,\n                hasGoogleBusiness: true,\n                hasSocialMedia: false,\n                hasOnlineReviews: false,\n                websiteUrl: dbProspect.website || undefined\n            }\n        },\n        contact: {\n            primaryContact: dbProspect.contact_name || \"\",\n            contactTitle: \"Owner\",\n            email: dbProspect.contact_email || \"\",\n            phone: dbProspect.contact_phone || \"\",\n            website: dbProspect.website || \"\",\n            decisionMaker: \"Yes\",\n            socialProfiles: {}\n        },\n        pipelineStage: dbProspect.pipeline_stage,\n        qualificationScore: {\n            total: dbProspect.score,\n            breakdown: {\n                businessSize: 15,\n                digitalPresence: 20,\n                competitorGaps: 15,\n                location: 10,\n                industry: 5,\n                revenueIndicators: 5\n            },\n            qualificationLevel: dbProspect.score > 70 ? \"high\" : dbProspect.score > 40 ? \"medium\" : \"low\",\n            lastUpdated: new Date(dbProspect.updated_at)\n        },\n        researchPasses: [\n            {\n                passNumber: 1,\n                type: \"google_maps\",\n                status: \"completed\",\n                completedAt: new Date(dbProspect.created_at),\n                dataCollected: {},\n                retryCount: 0,\n                source: {\n                    api: \"Google Maps API\"\n                }\n            },\n            {\n                passNumber: 2,\n                type: \"firecrawl\",\n                status: \"completed\",\n                completedAt: new Date(dbProspect.created_at),\n                dataCollected: {},\n                retryCount: 0,\n                source: {\n                    api: \"Firecrawl\"\n                }\n            }\n        ],\n        dataConfidence: 85,\n        businessInsights: {\n            painPoints: [\n                \"Limited online presence\"\n            ],\n            competitiveAdvantages: [\n                \"Strong local reputation\"\n            ]\n        },\n        tags: [\n            \"prospect\",\n            dbProspect.industry\n        ],\n        createdAt: new Date(dbProspect.created_at),\n        updatedAt: new Date(dbProspect.updated_at)\n    };\n};\nconst usePipelineStoreWithSupabase = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_2__.devtools)((set, get)=>({\n        // Prospects\n        prospects: [],\n        selectedProspect: null,\n        setSelectedProspect: (prospect)=>set({\n                selectedProspect: prospect\n            }),\n        // Loading states\n        isLoading: false,\n        error: null,\n        // WebSocket connection\n        socket: null,\n        wsConnected: false,\n        wsConnecting: false,\n        // Filtering\n        stageFilter: \"all\",\n        setStageFilter: (stage)=>set({\n                stageFilter: stage\n            }),\n        industryFilter: \"all\",\n        setIndustryFilter: (industry)=>set({\n                industryFilter: industry\n            }),\n        searchQuery: \"\",\n        setSearchQuery: (query)=>set({\n                searchQuery: query\n            }),\n        // Actions\n        fetchProspects: async ()=>{\n            set({\n                isLoading: true,\n                error: null\n            });\n            try {\n                const response = await fetch(\"/api/prospects\");\n                const result = await response.json();\n                if (result.success) {\n                    const prospects = result.data.map(convertToIProspect);\n                    set({\n                        prospects,\n                        isLoading: false\n                    });\n                } else {\n                    set({\n                        error: result.error || \"Failed to fetch prospects\",\n                        isLoading: false\n                    });\n                }\n            } catch (error) {\n                set({\n                    error: \"Failed to fetch prospects\",\n                    isLoading: false\n                });\n                console.error(\"Error fetching prospects:\", error);\n            }\n        },\n        moveProspect: async (prospectId, newStage)=>{\n            try {\n                const response = await fetch(\"/api/prospects?id=\".concat(prospectId), {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        pipeline_stage: newStage\n                    })\n                });\n                const result = await response.json();\n                if (result.success) {\n                    // Update local state optimistically\n                    set((state)=>({\n                            prospects: state.prospects.map((p)=>p.id === prospectId ? {\n                                    ...p,\n                                    pipelineStage: newStage\n                                } : p)\n                        }));\n                } else {\n                    set({\n                        error: result.error || \"Failed to update prospect stage\"\n                    });\n                }\n            } catch (error) {\n                console.error(\"Error moving prospect:\", error);\n                set({\n                    error: \"Failed to update prospect stage\"\n                });\n            }\n        },\n        updateProspectScore: async (prospectId, score)=>{\n            try {\n                const response = await fetch(\"/api/prospects?id=\".concat(prospectId), {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        score\n                    })\n                });\n                const result = await response.json();\n                if (result.success) {\n                    // Update local state\n                    set((state)=>({\n                            prospects: state.prospects.map((p)=>p.id === prospectId ? {\n                                    ...p,\n                                    qualificationScore: {\n                                        ...p.qualificationScore,\n                                        total: score,\n                                        qualificationLevel: score > 70 ? \"high\" : score > 40 ? \"medium\" : \"low\",\n                                        lastUpdated: new Date()\n                                    }\n                                } : p)\n                        }));\n                } else {\n                    set({\n                        error: result.error || \"Failed to update prospect score\"\n                    });\n                }\n            } catch (error) {\n                console.error(\"Error updating prospect score:\", error);\n                set({\n                    error: \"Failed to update prospect score\"\n                });\n            }\n        },\n        addProspect: async (prospect)=>{\n            try {\n                const response = await fetch(\"/api/prospects\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        business_name: prospect.business.name,\n                        industry: prospect.business.industry,\n                        location: \"\".concat(prospect.business.location.city, \", \").concat(prospect.business.location.state),\n                        contact_name: prospect.contact.primaryContact,\n                        contact_email: prospect.contact.email,\n                        contact_phone: prospect.contact.phone,\n                        website: prospect.business.website,\n                        temperature: prospect.temperature,\n                        pipeline_stage: prospect.pipelineStage,\n                        score: prospect.qualificationScore.total,\n                        notes: prospect.notes\n                    })\n                });\n                const result = await response.json();\n                if (result.success) {\n                    const iProspect = convertToIProspect(result.data);\n                    set((state)=>({\n                            prospects: [\n                                ...state.prospects,\n                                iProspect\n                            ]\n                        }));\n                    get().addNotification({\n                        type: \"success\",\n                        message: \"Prospect \".concat(iProspect.business.name, \" added successfully\")\n                    });\n                } else {\n                    set({\n                        error: result.error || \"Failed to add prospect\"\n                    });\n                    get().addNotification({\n                        type: \"error\",\n                        message: result.error || \"Failed to add prospect\"\n                    });\n                }\n            } catch (error) {\n                console.error(\"Error adding prospect:\", error);\n                set({\n                    error: \"Failed to add prospect\"\n                });\n                get().addNotification({\n                    type: \"error\",\n                    message: \"Failed to add prospect\"\n                });\n            }\n        },\n        updateProspect: async (prospectId, updates)=>{\n            try {\n                const response = await fetch(\"/api/prospects?id=\".concat(prospectId), {\n                    method: \"PUT\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(updates)\n                });\n                const result = await response.json();\n                if (result.success) {\n                    const updatedIProspect = convertToIProspect(result.data);\n                    set((state)=>({\n                            prospects: state.prospects.map((p)=>p.id === prospectId ? updatedIProspect : p)\n                        }));\n                    get().addNotification({\n                        type: \"success\",\n                        message: \"Prospect \".concat(updatedIProspect.business.name, \" updated successfully\")\n                    });\n                } else {\n                    set({\n                        error: result.error || \"Failed to update prospect\"\n                    });\n                    get().addNotification({\n                        type: \"error\",\n                        message: result.error || \"Failed to update prospect\"\n                    });\n                }\n            } catch (error) {\n                console.error(\"Error updating prospect:\", error);\n                set({\n                    error: \"Failed to update prospect\"\n                });\n                get().addNotification({\n                    type: \"error\",\n                    message: \"Failed to update prospect\"\n                });\n            }\n        },\n        deleteProspect: async (prospectId)=>{\n            try {\n                const prospect = get().prospects.find((p)=>p.id === prospectId);\n                const response = await fetch(\"/api/prospects?id=\".concat(prospectId), {\n                    method: \"DELETE\"\n                });\n                const result = await response.json();\n                if (result.success) {\n                    set((state)=>{\n                        var _state_selectedProspect;\n                        return {\n                            prospects: state.prospects.filter((p)=>p.id !== prospectId),\n                            selectedProspect: ((_state_selectedProspect = state.selectedProspect) === null || _state_selectedProspect === void 0 ? void 0 : _state_selectedProspect.id) === prospectId ? null : state.selectedProspect\n                        };\n                    });\n                    get().addNotification({\n                        type: \"success\",\n                        message: \"Prospect \".concat((prospect === null || prospect === void 0 ? void 0 : prospect.business.name) || \"deleted\", \" removed successfully\")\n                    });\n                } else {\n                    set({\n                        error: result.error || \"Failed to delete prospect\"\n                    });\n                    get().addNotification({\n                        type: \"error\",\n                        message: result.error || \"Failed to delete prospect\"\n                    });\n                }\n            } catch (error) {\n                console.error(\"Error deleting prospect:\", error);\n                set({\n                    error: \"Failed to delete prospect\"\n                });\n                get().addNotification({\n                    type: \"error\",\n                    message: \"Failed to delete prospect\"\n                });\n            }\n        },\n        // WebSocket connection management\n        connectWebSocket: ()=>{\n            var _state_socket;\n            const state = get();\n            if (((_state_socket = state.socket) === null || _state_socket === void 0 ? void 0 : _state_socket.connected) || state.wsConnecting) return;\n            set({\n                wsConnecting: true,\n                error: null\n            });\n            try {\n                const socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_0__.io)(\"http://localhost:3001\", {\n                    transports: [\n                        \"websocket\"\n                    ],\n                    timeout: 5000,\n                    forceNew: true\n                });\n                socket.on(\"connect\", ()=>{\n                    console.log(\"WebSocket connected to prospect updates\");\n                    set({\n                        socket,\n                        wsConnected: true,\n                        wsConnecting: false,\n                        error: null\n                    });\n                    // Subscribe to changes automatically on connect\n                    get().subscribeToChanges();\n                });\n                socket.on(\"disconnect\", (reason)=>{\n                    console.log(\"WebSocket disconnected:\", reason);\n                    set({\n                        wsConnected: false\n                    });\n                });\n                socket.on(\"connect_error\", (error)=>{\n                    console.error(\"WebSocket connection error:\", error);\n                    set({\n                        wsConnecting: false,\n                        wsConnected: false,\n                        error: \"Failed to connect to real-time updates\"\n                    });\n                });\n                set({\n                    socket\n                });\n            } catch (error) {\n                console.error(\"Failed to create WebSocket connection:\", error);\n                set({\n                    wsConnecting: false,\n                    error: \"Failed to initialize real-time updates\"\n                });\n            }\n        },\n        disconnectWebSocket: ()=>{\n            const state = get();\n            if (state.socket) {\n                state.socket.disconnect();\n                set({\n                    socket: null,\n                    wsConnected: false,\n                    wsConnecting: false\n                });\n            }\n        },\n        // Real-time event subscriptions\n        subscribeToChanges: ()=>{\n            const state = get();\n            if (!state.socket) return;\n            // Listen for prospect updates\n            state.socket.on(\"prospect:updated\", (data)=>{\n                var _updates_business;\n                const { prospectId, updates } = data;\n                set((state)=>({\n                        prospects: state.prospects.map((p)=>p.id === prospectId ? {\n                                ...p,\n                                ...updates\n                            } : p)\n                    }));\n                get().addNotification({\n                    type: \"info\",\n                    message: \"Prospect \".concat(((_updates_business = updates.business) === null || _updates_business === void 0 ? void 0 : _updates_business.name) || prospectId, \" updated\")\n                });\n            });\n            // Listen for prospect stage changes\n            state.socket.on(\"prospect:stage_changed\", (data)=>{\n                const { prospectId, newStage, oldStage } = data;\n                set((state)=>({\n                        prospects: state.prospects.map((p)=>p.id === prospectId ? {\n                                ...p,\n                                pipelineStage: newStage\n                            } : p)\n                    }));\n                get().addNotification({\n                    type: \"success\",\n                    message: \"Prospect moved from \".concat(oldStage, \" to \").concat(newStage)\n                });\n            });\n            // Listen for new prospects\n            state.socket.on(\"prospect:created\", (data)=>{\n                const newProspect = convertToIProspect(data.prospect);\n                set((state)=>({\n                        prospects: [\n                            ...state.prospects,\n                            newProspect\n                        ]\n                    }));\n                get().addNotification({\n                    type: \"success\",\n                    message: \"New prospect added: \".concat(newProspect.business.name)\n                });\n            });\n            // Listen for research progress\n            state.socket.on(\"research:progress\", (data)=>{\n                const { prospectId, stage, progress } = data;\n                get().addNotification({\n                    type: \"info\",\n                    message: \"Research \".concat(stage, \" (\").concat(progress, \"%) for prospect \").concat(prospectId)\n                });\n            });\n            state.socket.on(\"research:completed\", (data)=>{\n                const { prospectId, success } = data;\n                if (success) {\n                    // Refresh prospect data\n                    get().fetchProspects();\n                    get().addNotification({\n                        type: \"success\",\n                        message: \"Research completed for prospect \".concat(prospectId)\n                    });\n                }\n            });\n            // System alerts\n            state.socket.on(\"system:alert\", (data)=>{\n                const { level, message } = data;\n                get().addNotification({\n                    type: level === \"error\" ? \"error\" : level === \"warning\" ? \"warning\" : \"info\",\n                    message\n                });\n            });\n            console.log(\"Subscribed to real-time prospect updates\");\n        },\n        unsubscribeFromChanges: ()=>{\n            const state = get();\n            if (state.socket) {\n                state.socket.off(\"prospect:updated\");\n                state.socket.off(\"prospect:stage_changed\");\n                state.socket.off(\"prospect:created\");\n                state.socket.off(\"research:progress\");\n                state.socket.off(\"research:completed\");\n                state.socket.off(\"system:alert\");\n                console.log(\"Unsubscribed from real-time updates\");\n            }\n        },\n        // Research\n        researchQueue: [],\n        addToResearchQueue: (prospectId)=>set((state)=>({\n                    researchQueue: [\n                        ...state.researchQueue,\n                        prospectId\n                    ]\n                })),\n        removeFromResearchQueue: (prospectId)=>set((state)=>({\n                    researchQueue: state.researchQueue.filter((id)=>id !== prospectId)\n                })),\n        isResearching: false,\n        setIsResearching: (researching)=>set({\n                isResearching: researching\n            }),\n        // Notifications\n        notifications: [],\n        addNotification: (notification)=>{\n            const id = \"notification-\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n            const newNotification = {\n                ...notification,\n                id,\n                timestamp: new Date()\n            };\n            set((state)=>({\n                    notifications: [\n                        ...state.notifications,\n                        newNotification\n                    ]\n                }));\n            // Auto-remove info notifications after 5 seconds\n            if (notification.type === \"info\") {\n                setTimeout(()=>{\n                    get().removeNotification(id);\n                }, 5000);\n            } else if (notification.type === \"success\") {\n                setTimeout(()=>{\n                    get().removeNotification(id);\n                }, 3000);\n            }\n        },\n        removeNotification: (id)=>{\n            set((state)=>({\n                    notifications: state.notifications.filter((n)=>n.id !== id)\n                }));\n        },\n        // Computed values\n        getFilteredProspects: ()=>{\n            const state = get();\n            let filtered = [\n                ...state.prospects\n            ];\n            // Stage filter\n            if (state.stageFilter !== \"all\") {\n                filtered = filtered.filter((p)=>p.pipelineStage === state.stageFilter);\n            }\n            // Industry filter\n            if (state.industryFilter !== \"all\") {\n                filtered = filtered.filter((p)=>p.business.industry === state.industryFilter);\n            }\n            // Search\n            if (state.searchQuery) {\n                const query = state.searchQuery.toLowerCase();\n                filtered = filtered.filter((p)=>p.business.name.toLowerCase().includes(query) || p.contact.primaryContact.toLowerCase().includes(query) || p.business.location.city.toLowerCase().includes(query));\n            }\n            return filtered;\n        },\n        getStageCount: (stage)=>{\n            const state = get();\n            if (stage === \"cold\") {\n                return state.prospects.filter((p)=>p.temperature === \"cold\").length;\n            }\n            return state.prospects.filter((p)=>p.pipelineStage === stage).length;\n        }\n    }), {\n    name: \"pipeline-store\"\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./stores/usePipelineStoreWithSupabase.ts\n"));

/***/ })

});