"use client"

import * as React from "react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import {
  prospectSchema,
  type ProspectFormData,
  defaultProspectValues,
  industries,
  pipelineStages,
  temperatures,
  formatPhoneNumber,
} from "@/lib/validations/prospect"
import { usePipelineStoreWithSupabase } from "@/stores/usePipelineStoreWithSupabase"
import { IProspect } from "@/types"
import { Loader2, Save, X } from "lucide-react"

interface ProspectFormProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  prospect?: IProspect | null
  mode?: 'create' | 'edit'
}

export function ProspectForm({
  open,
  onOpenChange,
  prospect,
  mode = 'create'
}: ProspectFormProps) {
  const { addProspect, updateProspect, isLoading } = usePipelineStoreWithSupabase()
  const [isSubmitting, setIsSubmitting] = React.useState(false)

  const form = useForm<ProspectFormData>({
    resolver: zodResolver(prospectSchema),
    defaultValues: defaultProspectValues,
  })

  // Update form when prospect changes (for edit mode)
  React.useEffect(() => {
    if (prospect && mode === 'edit') {
      form.reset({
        business_name: prospect.business.name,
        industry: prospect.business.industry as any,
        location: `${prospect.business.location.city}, ${prospect.business.location.state}`,
        contact_name: prospect.contact.primaryContact || "",
        contact_email: prospect.contact.email || "",
        contact_phone: prospect.contact.phone || "",
        website: prospect.business.website || "",
        temperature: prospect.temperature || 'cold',
        pipeline_stage: prospect.pipelineStage,
        score: prospect.qualificationScore.total,
        notes: prospect.notes || "",
      })
    } else if (mode === 'create') {
      form.reset(defaultProspectValues)
    }
  }, [prospect, mode, form])

  const onSubmit = async (data: ProspectFormData) => {
    setIsSubmitting(true)
    try {
      if (mode === 'create') {
        await addProspect({
          business: {
            name: data.business_name,
            industry: data.industry,
            location: {
              city: data.location.split(',')[0]?.trim() || '',
              state: data.location.split(',')[1]?.trim() || '',
              address: '',
              zipCode: '',
              country: 'USA',
              coordinates: { lat: 0, lng: 0 }
            },
            website: data.website || '',
            description: '',
            size: {
              category: 'small' as any,
              employeeCount: 10,
              estimatedRevenue: 500000
            },
            digitalPresence: {
              hasWebsite: !!data.website,
              hasGoogleBusiness: true,
              hasSocialMedia: false,
              hasOnlineReviews: false,
              websiteUrl: data.website || undefined
            }
          },
          contact: {
            primaryContact: data.contact_name || '',
            contactTitle: 'Owner',
            email: data.contact_email || '',
            phone: data.contact_phone || '',
            website: data.website || '',
            decisionMaker: 'Yes',
            socialProfiles: {}
          },
          pipelineStage: data.pipeline_stage,
          qualificationScore: {
            total: data.score,
            breakdown: {
              businessSize: 15,
              digitalPresence: 20,
              competitorGaps: 15,
              location: 10,
              industry: 5,
              revenueIndicators: 5
            },
            qualificationLevel: data.score > 70 ? 'high' : data.score > 40 ? 'medium' : 'low',
            lastUpdated: new Date()
          },
          researchPasses: [],
          dataConfidence: 85,
          businessInsights: {
            painPoints: ['Limited online presence'],
            competitiveAdvantages: ['Strong local reputation']
          },
          tags: ['prospect', data.industry],
          createdAt: new Date(),
          updatedAt: new Date(),
          id: '', // Will be generated by API
          temperature: data.temperature,
          notes: data.notes || null
        })
      } else if (mode === 'edit' && prospect) {
        await updateProspect(prospect.id, {
          business_name: data.business_name,
          industry: data.industry,
          location: data.location,
          contact_name: data.contact_name || null,
          contact_email: data.contact_email || null,
          contact_phone: data.contact_phone || null,
          website: data.website || null,
          temperature: data.temperature,
          pipeline_stage: data.pipeline_stage,
          score: data.score,
          notes: data.notes || null,
        })
      }

      form.reset()
      onOpenChange(false)
    } catch (error) {
      console.error('Error submitting prospect form:', error)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleCancel = () => {
    form.reset()
    onOpenChange(false)
  }

  const formatPhoneInput = (value: string) => {
    return formatPhoneNumber(value)
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {mode === 'create' ? 'Add New Prospect' : 'Edit Prospect'}
          </DialogTitle>
          <DialogDescription>
            {mode === 'create'
              ? 'Enter the prospect details to add them to your pipeline.'
              : 'Update the prospect information below.'
            }
          </DialogDescription>
        </DialogHeader>

        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* Business Name */}
              <FormField
                control={form.control}
                name="business_name"
                render={({ field }) => (
                  <FormItem className="md:col-span-2">
                    <FormLabel>Business Name *</FormLabel>
                    <FormControl>
                      <Input placeholder="Enter business name" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Industry */}
              <FormField
                control={form.control}
                name="industry"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Industry *</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select industry" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {industries.map((industry) => (
                          <SelectItem key={industry} value={industry}>
                            {industry.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Location */}
              <FormField
                control={form.control}
                name="location"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Location *</FormLabel>
                    <FormControl>
                      <Input placeholder="City, State" {...field} />
                    </FormControl>
                    <FormDescription>
                      Format: City, State (e.g., Denver, CO)
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Contact Name */}
              <FormField
                control={form.control}
                name="contact_name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Contact Name</FormLabel>
                    <FormControl>
                      <Input placeholder="Primary contact person" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Contact Email */}
              <FormField
                control={form.control}
                name="contact_email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Contact Email</FormLabel>
                    <FormControl>
                      <Input
                        type="email"
                        placeholder="contact@business.com"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Contact Phone */}
              <FormField
                control={form.control}
                name="contact_phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Contact Phone</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="(555) 123-4567"
                        {...field}
                        onChange={(e) => {
                          const formatted = formatPhoneInput(e.target.value)
                          field.onChange(formatted)
                        }}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Website */}
              <FormField
                control={form.control}
                name="website"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Website</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="https://business.com"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Temperature */}
              <FormField
                control={form.control}
                name="temperature"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Temperature</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select temperature" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {temperatures.map((temp) => (
                          <SelectItem key={temp} value={temp}>
                            {temp.charAt(0).toUpperCase() + temp.slice(1)}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Pipeline Stage */}
              <FormField
                control={form.control}
                name="pipeline_stage"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Pipeline Stage</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select stage" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {pipelineStages.map((stage) => (
                          <SelectItem key={stage} value={stage}>
                            {stage.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Score */}
              <FormField
                control={form.control}
                name="score"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Qualification Score</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        min="0"
                        max="100"
                        placeholder="0-100"
                        {...field}
                        onChange={(e) => field.onChange(Number(e.target.value))}
                      />
                    </FormControl>
                    <FormDescription>
                      Score from 0-100 based on qualification criteria
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Notes */}
              <FormField
                control={form.control}
                name="notes"
                render={({ field }) => (
                  <FormItem className="md:col-span-2">
                    <FormLabel>Notes</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Additional notes about this prospect..."
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <DialogFooter>
              <Button
                type="button"
                variant="outline"
                onClick={handleCancel}
                disabled={isSubmitting}
              >
                <X className="mr-2 h-4 w-4" />
                Cancel
              </Button>
              <Button type="submit" disabled={isSubmitting || isLoading}>
                {isSubmitting || isLoading ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <Save className="mr-2 h-4 w-4" />
                )}
                {mode === 'create' ? 'Add Prospect' : 'Update Prospect'}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  )
}